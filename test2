#!/usr/bin/env python3
import re
import json
import xlsxwriter
from tqdm import tqdm

INPUT_FILE  = "input.txt"
OUTPUT_FILE = "ParsedLogs_Test.xlsx"

# 1) Header regex
HEADER_RE = re.compile(
    r'^(?P<timestamp>\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2},\d+)\s+'
    r'\[(?P<thread>[^\]]+)\]\s+'
    r'\[(?P<level>\w+)\s*\]\s+'
    r'\[(?P<logger>[^\]]+)\]\s*-\s*'
    r'(?P<rest>.+)$'
)

def flatten(o, prefix=""):
    out = {}
    if isinstance(o, dict):
        for k,v in o.items():
            key = f"{prefix}{k}"
            if isinstance(v,(dict,list)):
                out.update(flatten(v, key + "."))
            else:
                out[key] = v
    elif isinstance(o, list):
        for i,item in enumerate(o):
            out.update(flatten(item, f"{prefix}[{i}]."))
    return out

def parse_type_b(line):
    m = HEADER_RE.match(line)
    if not m:
        raise ValueError("Header parse failed")
    hdr = m.groupdict()
    rest = hdr.pop("rest")

    segments = []
    pos = 0
    length = len(rest)

    while True:
        # find next JSON
        start = rest.find("{", pos)
        if start == -1:
            # trailing metadata
            tail = rest[pos:].strip()
            if tail:
                segments.append(("metadata", tail))
            break

        # metadata before JSON
        if start > pos:
            meta = rest[pos:start].strip()
            if meta:
                segments.append(("metadata", meta))

        # find matching brace
        depth = 0
        end = start
        for i, ch in enumerate(rest[start:], start):
            if ch == "{":
                depth += 1
            elif ch == "}":
                depth -= 1
                if depth == 0:
                    end = i
                    break

        payload = rest[start:end+1]
        segments.append(("payload", payload))
        pos = end+1

    # build record
    rec = {
        "timestamp": hdr["timestamp"],
        "thread":    hdr["thread"],
        "level":     hdr["level"],
        "logger":    hdr["logger"],
    }

    # assign metadata_i and payload_i, and flatten payloads
    payload_count = 0
    meta_count    = 0
    for kind, text in segments:
        if kind == "metadata":
            rec[f"metadata_{meta_count}"] = text
            meta_count += 1
        else:  # payload
            rec[f"payload_{payload_count}"] = text
            # flatten this JSON
            try:
                obj = json.loads(text)
                flat = flatten(obj)
                for k,v in flat.items():
                    rec[f"payload_{payload_count}.{k}"] = v
            except:
                rec[f"payload_{payload_count}.parse_error"] = "invalid JSON"
            payload_count += 1

    return rec

def main():
    records = []
    with open(INPUT_FILE, encoding="utf-8", errors="ignore") as f:
        for idx, ln in enumerate(f, start=1):
            txt = ln.strip()
            if not txt or "~#~" not in txt:
                continue
            try:
                rec = parse_type_b(txt)
                rec["line_no"] = idx
                records.append(rec)
            except Exception as e:
                print(f"Line {idx} error: {e}")

    # write to Excel
    wb = xlsxwriter.Workbook(OUTPUT_FILE)
    ws = wb.add_worksheet("TypeB_Validation")

    # dynamic headers
    headers = []
    for r in records:
        for h in r:
            if h not in headers:
                headers.append(h)

    for c,h in enumerate(headers):
        ws.write(0, c, h)
    for r,rec in enumerate(records, start=1):
        for c,h in enumerate(headers):
            ws.write(r, c, rec.get(h, ""))

    wb.close()
    print(f"Wrote {len(records)} rows to {OUTPUT_FILE}")

if __name__ == "__main__":
    main()
