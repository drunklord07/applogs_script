#!/usr/bin/env python3
import os
import re
import json
import shutil
from docx import Document
from docx.shared import RGBColor
import xlsxwriter
from tqdm import tqdm

# === CONFIG ===
INPUT_FILE   = "input.txt"
OUTPUT_XLSX  = "ParsedLogs.xlsx"
OUTPUT_DOCX  = "ParsedLogs.docx"

MOBILE_REGEX = re.compile(r'(?<!\d)((?:\+91[\-\s]?|91[\-\s]?|0)?[6-9]\d{9})(?!\d)')

# === HELPERS ===
def flatten_json(obj, prefix=""):
    flat = {}
    if isinstance(obj, dict):
        for k, v in obj.items():
            path = f"{prefix}{k}"
            if isinstance(v, (dict, list)):
                flat.update(flatten_json(v, path + "."))
            else:
                flat[path] = v
    elif isinstance(obj, list):
        for i, item in enumerate(obj):
            flat.update(flatten_json(item, f"{prefix}[{i}]."))
    return flat

def detect_type(line):
    if re.match(r'^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}', line):
        if ' cid=[' in line and ' txn=[' in line:
            return 'A'
        if '~#' in line:
            return 'B'
        if 'UKC:' in line:
            return 'C'
    return None

# === PARSERS ===
def parse_type_a(line):
    m = re.match(
        r'^(?P<timestamp>\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}) '
        r'(?P<level>\w+) \[(?P<thread>[^\]]+)\] '
        r'cid=\[(?P<cid>[^\]]*)\] '
        r'txn=\[(?P<txn>[^\]]*)\] '
        r'(?P<logger>\w+) ?: (?P<message>.+)$',
        line
    )
    if not m:
        raise ValueError("Type A regex failed")
    return m.groupdict()

def parse_type_b(line, next_line):
    # split out JSON
    brace = line.find('{')
    if brace >= 0:
        meta = line[:brace].rstrip(' -')
        json_text = line[brace:]
    else:
        # header only, JSON on next line
        meta = line.rstrip(' -')
        json_text = next_line

    mm = re.match(
        r'^(?P<timestamp>\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2},\d+)\s+'
        r'\[(?P<thread>[^\]]+)\]\s+'
        r'\[(?P<level>\w+)\s*\]\s+'
        r'\[(?P<logger>[^\]]+)\]\s*-\s*(?P<rest>.+)$',
        meta
    )
    if not mm:
        raise ValueError("Type B meta regex failed")
    info = mm.groupdict()

    parts = info['rest'].split('~#')
    service, endpoint = parts[0], parts[1] if len(parts)>1 else ""
    record_id = parts[2] if len(parts)>2 else ""
    start_ts  = parts[3] if len(parts)>3 else ""
    end_ts    = parts[4] if len(parts)>4 else ""

    try:
        obj = json.loads(json_text)
    except Exception as e:
        raise ValueError(f"JSON decode error: {e}")
    flat = flatten_json(obj)

    d = {
        "timestamp": info['timestamp'],
        "level":     info['level'],
        "thread":    info['thread'],
        "logger":    info['logger'],
        "service":   service,
        "endpoint":  endpoint,
        "record_id": record_id,
        "start_ts":  start_ts,
        "end_ts":    end_ts,
    }
    for k,v in flat.items():
        d[f"json.{k}"] = v
    return d

def parse_type_c(line):
    mm = re.match(
        r'^(?P<timestamp>\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2},\d+)\s+'
        r'\[(?P<thread>[^\]]+)\]\s+'
        r'\[(?P<level>\w+)\s*\]\s+'
        r'\[(?P<logger>[^\]]+)\]\s*-\s*(?P<rest>.+)$',
        line
    )
    if not mm:
        raise ValueError("Type C meta regex failed")
    info = mm.groupdict()
    cols = [c.strip() for c in info['rest'].split(',')]
    ukc  = cols[0].split(':',1)[1] if ':' in cols[0] else cols[0]
    req_t = cols[1] if len(cols)>1 else ""
    resp_t= cols[2] if len(cols)>2 else ""
    masked= cols[3] if len(cols)>3 else ""
    op    = cols[4] if len(cols)>4 else ""
    other = ",".join(cols[5:]) if len(cols)>5 else ""
    return {
        "timestamp":    info['timestamp'],
        "level":        info['level'],
        "thread":       info['thread'],
        "logger":       info['logger'],
        "ukc":          ukc,
        "request_time": req_t,
        "response_time":resp_t,
        "masked_id":    masked,
        "operation":    op,
        "other":        other,
    }

# === PROCESS & PROGRESS BAR ===
def main():
    # Load lines
    lines = []
    with open(INPUT_FILE, encoding='utf-8', errors='ignore') as f:
        for idx, raw in enumerate(f, start=1):
            ln = raw.rstrip('\r\n')
            if ln.strip():
                lines.append((idx, ln))

    parsed = []
    errors = []
    i = 0

    pbar = tqdm(total=len(lines), desc="Parsing logs")
    while i < len(lines):
        line_no, line = lines[i]
        t = detect_type(line)
        try:
            if t == 'A':
                rec = parse_type_a(line)
                step = 1
            elif t == 'B':
                nxt = lines[i+1][1] if i+1 < len(lines) else ""
                rec = parse_type_b(line, nxt)
                step = 2
            elif t == 'C':
                rec = parse_type_c(line)
                step = 1
            else:
                raise ValueError("Unknown log type")
            # find mobiles
            for key, val in rec.items():
                for m in MOBILE_REGEX.finditer(str(val)):
                    parsed.append({
                        "line_no": line_no,
                        "type":    t,
                        **rec,
                        "match": m.group(1),
                        "field": key
                    })
        except Exception as e:
            errors.append({
                "line_no": line_no,
                "raw":     line,
                "error":   str(e)
            })
            step = 1

        i += step
        pbar.update(step)
    pbar.close()

    # --- WRITE EXCEL ---
    wb = xlsxwriter.Workbook(OUTPUT_XLSX)
    ws = wb.add_worksheet("ParsedLogs")
    if parsed:
        headers = list(parsed[0].keys())
        for c, h in enumerate(headers):
            ws.write(0, c, h)
        red = wb.add_format({"font_color":"red"})
        for r, row in enumerate(parsed, start=1):
            for c, h in enumerate(headers):
                val = row.get(h, "")
                if h == "match":
                    ws.write(r, c, val, red)
                else:
                    ws.write(r, c, val)
    # Errors sheet
    ws2 = wb.add_worksheet("Errors")
    ws2.write_row(0, 0, ["line_no", "raw", "error"])
    for r, err in enumerate(errors, start=1):
        ws2.write(r, 0, err["line_no"])
        ws2.write(r, 1, err["raw"])
        ws2.write(r, 2, err["error"])
    wb.close()

    # --- WRITE WORD ---
    doc = Document()
    for row in tqdm(parsed, desc="Generating Word"):
        p = doc.add_paragraph()
        p.add_run(f"{row['line_no']} | {row['timestamp']} | ")
        run = p.add_run(row['match'])
        run.font.color.rgb = RGBColor(255, 0, 0)
        p.add_run(f" [{row['field']}]")
    doc.save(OUTPUT_DOCX)

    # --- SUMMARY ---
    print(f"Total lines read : {len(lines)}")
    print(f"Total mobiles found: {len(parsed)}")
    print(f"Total parse errors: {len(errors)}")

if __name__ == "__main__":
    main()
